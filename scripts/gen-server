#! /usr/bin/env bash

set -eu -o pipefail

# Ensure the latest image is being used
if [ -n "${CIRCLECI+x}" ]; then
  # In CircleCI the docker image has the binary installed
  echo "CircleCI has swagger built in"
else
  # Locally we need to download the docker image to get the binary
  image=milmove/circleci-docker:milmove-orders-de8333d340c6cc5bc7554c913a955aacfa0c4d2b
  docker pull -q "${image}"
fi

# Remove the generated code
gendir=./pkg/gen

# Clean out the old generated files
rm -rf $gendir
mkdir -p $gendir

# Depending on environment use the built-in swagger (docker) or use the docker image directly
swagger_func() {
  if [ -n "${CIRCLECI+x}" ]; then
    # In CircleCI the docker image has the binary installed
    echo "RUNNING IN CIRCLECI"
    /usr/local/bin/swagger "$@"
  else
    docker run --rm=true -v "${PWD}:${PWD}" -w "${PWD}" "${image}" swagger "$@"
  fi
}

# Capture all PIDs so we can do the work async
pids=()

# Generate server code
function generate_server () {
  if [ "$#" -ne 4 ]; then
    echo "Illegal number of parameters to generate_server, got $#, expected 4"
    exit 1
  fi
  swagger_file=$1
  model_package=$2
  server_package=$3
  api_package=$4

  swagger_func generate server -q -f "${swagger_file}" -t "${gendir}" --model-package "${model_package}" --server-package "${server_package}" --api-package "${api_package}" --exclude-main -A milmove_orders &
  pids+=($!)
}

# Generate client code
function generate_client () {
  if [ "$#" -ne 3 ]; then
    echo "Illegal number of parameters to generate_client, got $#, expected 3"
    exit 1
  fi
  swagger_file=$1
  model_package=$2
  client_package=$3

  swagger_func generate client -q -f "${swagger_file}" -t "${gendir}" --model-package "${model_package}" --client-package "${client_package}" -A milmove_orders &
  pids+=($!)
}

# Generate Server Code
# For readability they have been sorted and spaces added
generate_server swagger/orders.yaml   ordersmessages   ordersapi   ordersoperations

# Generate Client Code
generate_client swagger/orders.yaml ordersmessages ordersclient

# Wait for all processes to finish
for pid in ${pids[*]}; do
  wait "${pid}"
done
