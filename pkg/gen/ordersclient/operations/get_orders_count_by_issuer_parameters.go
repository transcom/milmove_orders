// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOrdersCountByIssuerParams creates a new GetOrdersCountByIssuerParams object
// with the default values initialized.
func NewGetOrdersCountByIssuerParams() *GetOrdersCountByIssuerParams {
	var ()
	return &GetOrdersCountByIssuerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrdersCountByIssuerParamsWithTimeout creates a new GetOrdersCountByIssuerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrdersCountByIssuerParamsWithTimeout(timeout time.Duration) *GetOrdersCountByIssuerParams {
	var ()
	return &GetOrdersCountByIssuerParams{

		timeout: timeout,
	}
}

// NewGetOrdersCountByIssuerParamsWithContext creates a new GetOrdersCountByIssuerParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrdersCountByIssuerParamsWithContext(ctx context.Context) *GetOrdersCountByIssuerParams {
	var ()
	return &GetOrdersCountByIssuerParams{

		Context: ctx,
	}
}

// NewGetOrdersCountByIssuerParamsWithHTTPClient creates a new GetOrdersCountByIssuerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrdersCountByIssuerParamsWithHTTPClient(client *http.Client) *GetOrdersCountByIssuerParams {
	var ()
	return &GetOrdersCountByIssuerParams{
		HTTPClient: client,
	}
}

/*GetOrdersCountByIssuerParams contains all the parameters to send to the API endpoint
for the get orders count by issuer operation typically these are written to a http.Request
*/
type GetOrdersCountByIssuerParams struct {

	/*EndDateTime
	  Search date-time end

	*/
	EndDateTime *strfmt.DateTime
	/*Issuer
	  Organization that issued the Orders.

	*/
	Issuer string
	/*StartDateTime
	  Search date-time start

	*/
	StartDateTime *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) WithTimeout(timeout time.Duration) *GetOrdersCountByIssuerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) WithContext(ctx context.Context) *GetOrdersCountByIssuerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) WithHTTPClient(client *http.Client) *GetOrdersCountByIssuerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEndDateTime adds the endDateTime to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) WithEndDateTime(endDateTime *strfmt.DateTime) *GetOrdersCountByIssuerParams {
	o.SetEndDateTime(endDateTime)
	return o
}

// SetEndDateTime adds the endDateTime to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) SetEndDateTime(endDateTime *strfmt.DateTime) {
	o.EndDateTime = endDateTime
}

// WithIssuer adds the issuer to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) WithIssuer(issuer string) *GetOrdersCountByIssuerParams {
	o.SetIssuer(issuer)
	return o
}

// SetIssuer adds the issuer to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) SetIssuer(issuer string) {
	o.Issuer = issuer
}

// WithStartDateTime adds the startDateTime to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) WithStartDateTime(startDateTime *strfmt.DateTime) *GetOrdersCountByIssuerParams {
	o.SetStartDateTime(startDateTime)
	return o
}

// SetStartDateTime adds the startDateTime to the get orders count by issuer params
func (o *GetOrdersCountByIssuerParams) SetStartDateTime(startDateTime *strfmt.DateTime) {
	o.StartDateTime = startDateTime
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrdersCountByIssuerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EndDateTime != nil {

		// query param endDateTime
		var qrEndDateTime strfmt.DateTime
		if o.EndDateTime != nil {
			qrEndDateTime = *o.EndDateTime
		}
		qEndDateTime := qrEndDateTime.String()
		if qEndDateTime != "" {
			if err := r.SetQueryParam("endDateTime", qEndDateTime); err != nil {
				return err
			}
		}

	}

	// path param issuer
	if err := r.SetPathParam("issuer", o.Issuer); err != nil {
		return err
	}

	if o.StartDateTime != nil {

		// query param startDateTime
		var qrStartDateTime strfmt.DateTime
		if o.StartDateTime != nil {
			qrStartDateTime = *o.StartDateTime
		}
		qStartDateTime := qrStartDateTime.String()
		if qStartDateTime != "" {
			if err := r.SetQueryParam("startDateTime", qStartDateTime); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
