// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetOrders(params *GetOrdersParams) (*GetOrdersOK, error)

	GetOrdersByIssuerAndOrdersNum(params *GetOrdersByIssuerAndOrdersNumParams) (*GetOrdersByIssuerAndOrdersNumOK, error)

	GetOrdersCount(params *GetOrdersCountParams) (*GetOrdersCountOK, error)

	IndexOrdersForMember(params *IndexOrdersForMemberParams) (*IndexOrdersForMemberOK, error)

	PostRevision(params *PostRevisionParams) (*PostRevisionCreated, error)

	PostRevisionToOrders(params *PostRevisionToOrdersParams) (*PostRevisionToOrdersCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetOrders retrieves a set of orders and all of its revisions by UUID

  Gets Orders with the supplied UUID.
## Errors
Users of this endpoint must have permission to read Orders for the `issuer` associated with the Orders. If not, this endpoint will return `403 Forbidden`.
The UUID must match an existing set of Orders. Otherwise, this endpoint will return `404 Not Found`.
*/
func (a *Client) GetOrders(params *GetOrdersParams) (*GetOrdersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrders",
		Method:             "GET",
		PathPattern:        "/orders/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrdersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrdersByIssuerAndOrdersNum retrieves orders by issuer and orders number

  Return Orders with the provided issuer and orders number.
# Errors
Users of this endpoint must have permission to read Orders for the specified issuer. Otherwise, this endpoint will return `403 Forbidden`.
If there are no Orders with the specified orders number from the specified issuer, then this endpoint will return `404 Not Found`.
*/
func (a *Client) GetOrdersByIssuerAndOrdersNum(params *GetOrdersByIssuerAndOrdersNumParams) (*GetOrdersByIssuerAndOrdersNumOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrdersByIssuerAndOrdersNumParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrdersByIssuerAndOrdersNum",
		Method:             "GET",
		PathPattern:        "/issuers/{issuer}/orders/{ordersNum}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrdersByIssuerAndOrdersNumReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrdersByIssuerAndOrdersNumOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrdersByIssuerAndOrdersNum: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetOrdersCount retrieves a count of orders by issuer

  Gets a Count of Orders by issuer.
## Errors
Users of this endpoint must have permission to read Orders for the `issuer` associated with the Orders. If not, this endpoint will return `403 Forbidden`.
*/
func (a *Client) GetOrdersCount(params *GetOrdersCountParams) (*GetOrdersCountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrdersCountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrdersCount",
		Method:             "GET",
		PathPattern:        "/issuers/{issuer}/count",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetOrdersCountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOrdersCountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getOrdersCount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  IndexOrdersForMember retrieves orders for a particular member

  Returns all Orders for the specified service member. This endpoint will only return Orders cut by issuers to which the user has read permission.

*/
func (a *Client) IndexOrdersForMember(params *IndexOrdersForMemberParams) (*IndexOrdersForMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIndexOrdersForMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "indexOrdersForMember",
		Method:             "GET",
		PathPattern:        "/edipis/{edipi}/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IndexOrdersForMemberReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IndexOrdersForMemberOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for indexOrdersForMember: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRevision submits a new set of orders make an amendment to an existing set of orders or cancel a set of orders

  Creates a Revision of a set of orders.
# Identifying the service member
The Orders Gateway associates Orders and their Revisions with the member's EDIPI. For users of this API who do not have the member's EDIPI but do have the member's SSN, they can submit the SSN instead. The Orders Gateway will then fetch the member's EDIPI using DMDC's Identity Web Services. Calls using the 9-digit SSN instead of the 10-digit EDIPI will take longer to respond due to the additional overhead.
# Submitting Orders Revisions
## New Orders
The supplied Revision is considered part of a new set of Orders if the combination of `ordersNum` and `issuer` has never been seen before. A new UUID is created and associated with the Orders, which is returned along with the supplied Revision.
## Amended Orders
If the system already has Orders with the supplied combination of `ordersNum` and `issuer`, then the supplied Revision is considered to be an amendment of those Orders. The Revision with the highest `seqNum` is considered the most recent amendment, which is not necessarily the Revision with the latest `dateIssued` or the Revision submitted last.
If you stored the UUID of the Orders from a previous call to this API, you have the option of using the `POST /orders/{uuid}` API instead to supply a new Revision.
## Canceled, Rescinded, or Revoked Orders
To cancel, rescind, or revoke Orders, POST a new Revision with the status set to "canceled".
# Errors
Users of this endpoint must have permission to write Orders for the specified `issuer`. Otherwise, this endpoint will return `403 Forbidden`.
If SSN instead of EDIPI is provided to identify the member, and DMDC's Identity Web Services does not return an EDIPI for that SSN, then this endpoint will return `404 Not Found`.
If amending existing Orders, the supplied seqNum must be unique when compared to existing Revisions in those Orders. If it has already been used, this endpoint will return `409 Conflict`.
If amending existing Orders, the supplied memberId, as an EDIPI, or as an EDIPI retrieved from DMDC by SSN, must match the EDIPI in the existing Orders. If the EDIPIs do not match, this endpoint will return `409 Conflict`.

*/
func (a *Client) PostRevision(params *PostRevisionParams) (*PostRevisionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRevisionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRevision",
		Method:             "POST",
		PathPattern:        "/orders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRevisionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRevisionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postRevision: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostRevisionToOrders makes an amendment to or cancel an existing set of orders by UUID

  Creates a Revision of a set of orders. The Orders to be amended or canceled must already exist with the supplied UUID.
## Amendment requirements
The `seqNum` in the supplied Revision must be unique among all Revisions in these Orders. Other than `seqNum`, nothing else is required to change in the Revision compared to any other Revision in these Orders.
# Errors
Users of this endpoint must have permission to write Orders for the `issuer` associated with the Orders that were originally POST'd to the `orders` endpoint. If not, this endpoint will return `403 Forbidden`.
The UUID must match an existing set of Orders. Otherwise, this endpoint will return `404 Not Found`.
If amending existing Orders, the supplied seqNum must be unique. If it has already been used, this endpoint will return `409 Conflict`.
*/
func (a *Client) PostRevisionToOrders(params *PostRevisionToOrdersParams) (*PostRevisionToOrdersCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostRevisionToOrdersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postRevisionToOrders",
		Method:             "POST",
		PathPattern:        "/orders/{uuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostRevisionToOrdersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostRevisionToOrdersCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postRevisionToOrders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
