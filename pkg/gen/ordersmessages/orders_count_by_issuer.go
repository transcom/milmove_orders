// Code generated by go-swagger; DO NOT EDIT.

package ordersmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersCountByIssuer orders count by issuer
// swagger:model OrdersCountByIssuer
type OrdersCountByIssuer struct {

	// The number of orders in the DB by issuer.
	//
	// Required: true
	// Minimum: 0
	Count *int64 `json:"count"`

	// Search date-time end
	// Format: date-time
	EndDateTime strfmt.DateTime `json:"endDateTime,omitempty"`

	// issuer
	// Required: true
	Issuer Issuer `json:"issuer"`

	// Search date-time start
	// Format: date-time
	StartDateTime strfmt.DateTime `json:"startDateTime,omitempty"`
}

// Validate validates this orders count by issuer
func (m *OrdersCountByIssuer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersCountByIssuer) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	if err := validate.MinimumInt("count", "body", int64(*m.Count), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *OrdersCountByIssuer) validateEndDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrdersCountByIssuer) validateIssuer(formats strfmt.Registry) error {

	if err := m.Issuer.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("issuer")
		}
		return err
	}

	return nil
}

func (m *OrdersCountByIssuer) validateStartDateTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrdersCountByIssuer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersCountByIssuer) UnmarshalBinary(b []byte) error {
	var res OrdersCountByIssuer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
