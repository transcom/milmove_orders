############
#
# Caches
#
# Caches may have a `v1-` prefix, since caches in CircleCI 2.0 are immutable.
# A prefix provides an easy way to invalidate a cache.  See https://circleci.com/docs/2.0/caching/#clearing-cache
#
# Please do not use docker_layer_caching! It costs too much money to run. Please set to `false`.
#
############

version: '2.1'
orbs:
  aws-ecr: circleci/aws-ecr@6.7.0
  slack: circleci/slack@3.4.2

executors:
  # `milmove_orders_small` and `milmove_orders_medium` use the `milmove/circleci-docker` docker image with a checkout of the milmove_orders code
  milmove_orders_small:
    resource_class: small
    working_directory: ~/milmove_orders
    docker:
      - image: milmove/circleci-docker:milmove-orders-3d673da42b5c1bbe3e62815d309217c76315567a
  milmove_orders_medium:
    resource_class: medium
    working_directory: ~/milmove_orders
    docker:
      - image: milmove/circleci-docker:milmove-orders-3d673da42b5c1bbe3e62815d309217c76315567a
  # `milmove_orders_and_postgres_medium` adds a secondary postgres container to be used during testing.
  milmove_orders_and_postgres_medium:
    resource_class: medium
    working_directory: ~/milmove_orders
    docker:
      - image: milmove/circleci-docker:milmove-orders-3d673da42b5c1bbe3e62815d309217c76315567a
      - image: postgres:10.10
        environment:
          - POSTGRES_PASSWORD: mysecretpassword
          - POSTGRES_DB: test_db
        command: '-c fsync=off -c full_page_writes=off -c max_connections=200'

commands:
  announce_failure:
    parameters:
    steps:
      - slack/status:
          fail_only: true
          failure_message: 'The $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME commit $CIRCLE_SHA1 broke on job $CIRCLE_JOB! Contact $CIRCLE_USERNAME for more information.'
          only_for_branches: master
          webhook: ${SLACK_WEBHOOK_URL}
      - run:
          name: Announce failure for failed Deploys on master branch to Pager Duty
          command: scripts/circleci-announce-broken-branch
          when: on_fail
          filters:
            branches:
              only: master

  ecr_describe_image_scan_findings:
    parameters:
      repo:
        type: string
    steps:
      - run:
          name: 'Describe image scan findings'
          command: scripts/ecr-describe-image-scan-findings << parameters.repo >> ${CIRCLE_SHA1}

  server_tests_step:
    parameters:
      application:
        type: string
    steps:
      - run:
          name: make server_test_build for <<parameters.application>>
          command: make server_test_build
          environment:
            APPLICATION: "<< parameters.application >>"
            GOFLAGS: "-p=4"
      - run:
          name: make db_test_reset for <<parameters.application>>
          command: make db_test_reset
          environment:
            APPLICATION: "<< parameters.application >>"
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            MIGRATION_MANIFEST: '/home/circleci/milmove_orders/migrations/<< parameters.application >>/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/milmove_orders/migrations/<< parameters.application >>/schema;file:///home/circleci/milmove_orders/migrations/<< parameters.application >>/secure'
      - run:
          name: make db_test_migrate for <<parameters.application>>
          command: make db_test_migrate
          environment:
            APPLICATION: "<< parameters.application >>"
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            MIGRATION_MANIFEST: '/home/circleci/milmove_orders/migrations/<< parameters.application >>/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/milmove_orders/migrations/<< parameters.application >>/schema;file:///home/circleci/milmove_orders/migrations/<< parameters.application >>/secure'
      - run:
          name: make server_test_standalone for <<parameters.application>>
          command: |
            echo 'export LOGIN_GOV_SECRET_KEY=$(echo $E2E_LOGIN_GOV_SECRET_KEY | base64 --decode)' >> $BASH_ENV
            source $BASH_ENV
            make server_test_standalone
          environment:
            APPLICATION: "<< parameters.application >>"
            DB_PASSWORD: mysecretpassword
            DB_USER: postgres
            DB_HOST: localhost
            DB_PORT_TEST: 5433
            DB_PORT: 5432
            DB_NAME: test_db
            DB_NAME_TEST: test_db
            EIA_KEY: db2522a43820268a41a802a16ae9fd26 # dummy key generated with openssl rand -hex 16
            ENV: test
            ENVIRONMENT: test
            GOFLAGS: "-p=4"
            JUNIT: 1
            MIGRATION_MANIFEST: '/home/circleci/milmove_orders/migrations/<< parameters.application >>/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/milmove_orders/migrations/<< parameters.application >>/schema;file:///home/circleci/milmove_orders/migrations/<< parameters.application >>/secure'
            SERVE_API_INTERNAL: true

jobs:
  # `pre_deps_golang` is used for caching Go module sources
  pre_deps_golang:
    executor: milmove_orders_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}
      - run:
          name: Install dependencies
          command: for i in $(seq 1 5); do go get ./... && s=0 && break || s=$? && sleep 5; done; (exit $s)
      - save_cache:
          key: go-mod-sources-v2-{{ checksum "go.sum" }}
          paths:
            - '/go/pkg/mod'
      - announce_failure

  # `check_generated_code` is used to ensure generated code doesn't change
  check_generated_code:
    executor: milmove_orders_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}
      - run: echo 'export PATH=${PATH}:~/go/bin:~/milmove_orders/bin' >> $BASH_ENV
      - run: make server_generate
      - run: scripts/check-generated-code
      - save_cache:
          key: go-mod-sources-v2-{{ checksum "go.sum" }}
          paths:
            - '/go/pkg/mod'
      - announce_failure

  # `pre_test` runs pre-commit against all files.
  pre_test:
    executor: milmove_orders_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}
      - restore_cache:
          keys:
            - pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
      - run: echo 'export PATH=${PATH}:~/go/bin:~/milmove_orders/bin' >> $BASH_ENV
      # this is so we can avoid go mod downloading and resulting in an error on a false positive
      - run: scripts/pre-commit-go-mod || exit 0
      - run:
          name: Run pre-commit tests without golangci-lint
          command: SKIP=golangci-lint pre-commit run --all-files
      # The output of golangci-lint is an artifact towards STIG compliance
      - run:
          name: Run pre-commit tests with golangci-lint only
          command: |
            echo 'export GOLANGCI_LINT_CONCURRENCY=1' >> $BASH_ENV
            echo 'export GOLANGCI_LINT_VERBOSE=-v' >> $BASH_ENV
            source $BASH_ENV
            mkdir -p tmp/test-results/pretest
            pre-commit run -v --all-files golangci-lint | tee tmp/test-results/pretest/golangci-lint.out
      # `pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}` is used to cache pre-commit plugins.
      - save_cache:
          key: pre-commit-dot-cache-{{ checksum ".pre-commit-config.yaml" }}
          paths:
            - ~/.cache/pre-commit
      - store_artifacts:
          path: ~/milmove_orders/tmp/test-results
          destination: test-results
      - announce_failure

  # `acceptance_tests_local` runs acceptance tests for the webserver against a local environment.
  acceptance_tests_local:
    executor: milmove_orders_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}
      - run:
          name: Run acceptance tests
          command: |
            echo 'export MOVE_MIL_DOD_CA_CERT=$(cat /home/circleci/milmove_orders/config/tls/devlocal-ca.pem)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_CERT=$(cat /home/circleci/milmove_orders/config/tls/devlocal-mtls.cer)' >> $BASH_ENV
            echo 'export MOVE_MIL_DOD_TLS_KEY=$(cat /home/circleci/milmove_orders/config/tls/devlocal-mtls.key)' >> $BASH_ENV
            source $BASH_ENV
            make acceptance_test
          environment:
            DB_RETRY_INTERVAL: 5s
            DEVLOCAL_CA: /home/circleci/milmove_orders/config/tls/devlocal-ca.pem
            DOD_CA_PACKAGE: /home/circleci/milmove_orders/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b
            ENV: test
            ENVIRONMENT: test
            MIGRATION_MANIFEST: '/home/circleci/milmove_orders/migrations/orders/migrations_manifest.txt'
            MIGRATION_PATH: 'file:///home/circleci/milmove_orders/migrations/orders/schema;file:///home/circleci/milmove_orders/migrations/orders/secure'
            MUTUAL_TLS_ENABLED: true
            PWD: /home/circleci/milmove_orders
      - announce_failure

  # `server_test` runs the server side Go tests
  server_test:
    executor: milmove_orders_and_postgres_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}
      - run: echo 'export PATH=${PATH}:~/go/bin:~/milmove_orders/bin' >> $BASH_ENV
      - run: sudo apt-get update && sudo apt-get install -yy postgresql-client
      - run: make bin/go-junit-report
      - run: make bin/orders
      - server_tests_step:
          application: orders
      - store_artifacts:
          path: ~/milmove_orders/tmp/test-results
          destination: test-results
      - store_test_results:
          path: ~/milmove_orders/tmp/test-results
      - announce_failure

  # `build_orders` builds the application container and pushes to the container repository
  build_orders:
    executor: milmove_orders_medium
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}
      - run: make bin/rds-ca-2019-root.pem
      - run: make bin/orders
      - run:
          name: Fix branch name
          command: |
            echo 'shopt -s extglob' >> $BASH_ENV
            echo 'export BRANCH_NAME=${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}' >> $BASH_ENV
            source $BASH_ENV
            echo "${BRANCH_NAME}"
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          attach-workspace: true
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          checkout: false
          dockerfile: Dockerfile
          region: AWS_DEFAULT_REGION
          repo: orders
          tag: "git-${CIRCLE_SHA1},git-branch-${BRANCH_NAME}"
      - ecr_describe_image_scan_findings:
          repo: orders
      - announce_failure

  # `build_migrations` builds the migrations container and pushes to the container repository
  build_migrations:
    executor: milmove_orders_medium
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: false
      - run: make bin/rds-ca-2019-root.pem
      - run: make bin/orders
      - run:
          name: Fix branch name
          command: |
            echo 'shopt -s extglob' >> $BASH_ENV
            echo 'export BRANCH_NAME=${CIRCLE_BRANCH//+([^A-Za-z0-9-.])/-}' >> $BASH_ENV
            source $BASH_ENV
            echo "${BRANCH_NAME}"
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          attach-workspace: true
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          checkout: false
          dockerfile: Dockerfile.migrations
          region: AWS_DEFAULT_REGION
          repo: orders-migrations
          tag: "git-${CIRCLE_SHA1},git-branch-${BRANCH_NAME}"
      - ecr_describe_image_scan_findings:
          repo: orders-migrations
      - announce_failure


  # `acceptance_tests_experimental` runs acceptance tests for the webserver against the experimental environment.
  acceptance_tests_experimental:
    executor: milmove_orders_medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-sources-v2-{{ checksum "go.sum" }}-{{ checksum "scripts/check-go-version" }}
      - run:
          name: Run acceptance tests
          command: make acceptance_test
          environment:
            CHAMBER_RETRIES: 20
            DB_REGION: us-west-2
            DB_RETRY_INTERVAL: 5s
            DEVLOCAL_CA: /home/circleci/transcom/mymove/config/tls/devlocal-ca.pem
            DOD_CA_PACKAGE: /home/circleci/transcom/mymove/config/tls/Certificates_PKCS7_v5.6_DoD.der.p7b
            ENV: test
            ENVIRONMENT: experimental
            MUTUAL_TLS_ENABLED: true
            PWD: /home/circleci/milmove_orders
            TEST_ACC_ENV: experimental
      - announce_failure

workflows:
  version: 2

  app:
    jobs:
      - pre_deps_golang

      - check_generated_code:
          requires:
            - pre_deps_golang

      - pre_test:
          requires:
            - pre_deps_golang

      - acceptance_tests_local:
          requires:
            - pre_deps_golang

      - server_test:
          requires:
            - pre_deps_golang
          # if testing on experimental, you can disable these tests by using the commented block below.
          filters:
            branches:
              ignore: placeholder_branch_name

      - build_orders:
          requires:
            - pre_deps_golang
            - acceptance_tests_local # don't bother building and pushing the application if it won't even start properly

      - build_migrations:
          requires:
            - pre_deps_golang
